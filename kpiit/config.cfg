# Copyright (C) 2018 CERN.
#
# KPIit is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

# DOI prefixes
zenodo_doi_prefix = 10.5281
cds_videos_doi_prefix = 10.17181
cod_doi_prefix = 10.7483

# Service names
cds_service = cds
cds_videos_service = cds_videos
cod_service = cod
zenodo_service = zenodo

# Publisher environment (will be sent to CERN's Grafana instance)
publish_repo_env =

# URLs
cern_grafana_url =

# Configure general Celery settings
[celery]
broker_url =
result_backend =
serializer = metricjson

    # Configure Celery tasks
    [[tasks]]
        # Task to collect KPIs for Zenodo DOI resolutions
        [[[zenodo_doi]]]
        task = kpiit.tasks.collect_and_publish_metrics
        schedule = doi
        metrics = zenodo_doi
        publishers = zenodo_doi

        # Task to collect KPIs for CDS videos DOI resolutions
        [[[cds_videos_doi]]]
        task = kpiit.tasks.collect_and_publish_metrics
        schedule = doi
        metrics = cds_videos_doi
        publishers = cds_videos_doi

        # Task to collect KPIs for CERN OpenData DOI resolutions
        [[[cod_doi]]]
        task = kpiit.tasks.collect_and_publish_metrics
        schedule = doi
        metrics = cod_doi
        publishers = cod_doi

        # Task to collect KPIs for Zenodo
        [[[zenodo_repo]]]
        task = kpiit.tasks.collect_and_publish_metrics
        schedule = repo
        metrics = zenodo_records, zenodo_uptime_web, zenodo_uptime_search, zenodo_uptime_files, zenodo_visits, zenodo_support
        publishers = zenodo_repo

        # Task to collect KPIs for CDS Videos
        [[[cds_videos_repo]]]
        task = kpiit.tasks.collect_and_publish_metrics
        schedule = repo
        metrics = cds_videos_records, cds_videos_uptime_web, cds_videos_uptime_search, cds_videos_uptime_files, cds_videos_visits, cds_videos_support
        publishers = cds_videos_repo

        # Task to collect KPIs for CERN Open Data
        [[[cod_repo]]]
        task = kpiit.tasks.collect_and_publish_metrics
        schedule = repo
        metrics = cod_records, cod_uptime_web, cod_uptime_search, cod_uptime_files, cod_visits, cod_support
        publishers = cod_repo

    # Configure Celery schedules
    # Uses Celery Beat's crontab params (see http://docs.celeryproject.org/en/latest/reference/celery.schedules.html#celery.schedules.crontab for more info)
    [[schedules]]
        [[[doi]]]

        [[[repo]]]

    # Configure Celery metrics
    [[metrics]]
        # DOI metrics
        [[[zenodo_doi]]]
        instance = kpiit.metrics.doi
        prefix = $zenodo_doi_prefix

        [[[cds_videos_doi]]]
        instance = kpiit.metrics.doi
        prefix = $cds_videos_doi_prefix

        [[[cod_doi]]]
        instance = kpiit.metrics.doi
        prefix = $cod_doi_prefix

        # Records metrics
        [[[zenodo_records]]]
        instance = kpiit.metrics.records
        name = zenodo_records
        url = https://zenodo.org/api/records/?all_versions

        [[[cds_videos_records]]]
        instance = kpiit.metrics.records
        name = cds_videos_records
        url = https://videos.cern.ch/api/records/

        [[[cod_records]]]
        instance = kpiit.metrics.records
        name = cod_records
        url = http://opendata.cern.ch/api/records/

        # Zenodo uptime metrics
        [[[zenodo_uptime_web]]]
        instance = kpiit.metrics.uptime
        name = web
        url = https://api.uptimerobot.com/v2/
        api_key =
        monitor = Website
        [[[zenodo_uptime_search]]]
        instance = kpiit.metrics.uptime
        name = search
        url = https://api.uptimerobot.com/v2/
        api_key =
        monitor = Search
        [[[zenodo_uptime_files]]]
        instance = kpiit.metrics.uptime
        name = files
        url = https://api.uptimerobot.com/v2/
        api_key =
        monitor = Files upload/download

        # CDS Videos uptime metrics
        [[[cds_videos_uptime_web]]]
        instance = kpiit.metrics.uptime
        name = web
        url = https://api.uptimerobot.com/v2/
        api_key =
        monitor = videos.cern.ch - get record details page
        [[[cds_videos_uptime_search]]]
        instance = kpiit.metrics.uptime
        name = search
        url = https://api.uptimerobot.com/v2/
        api_key =
        monitor = videos.cern.ch - search
        [[[cds_videos_uptime_files]]]
        instance = kpiit.metrics.uptime
        name = files
        url = https://api.uptimerobot.com/v2/
        api_key =
        monitor = videos.cern.ch - get file (check EOS)

        # COD uptime metrics
        [[[cod_uptime_web]]]
        instance = kpiit.metrics.uptime
        name = web
        url = https://api.uptimerobot.com/v2/
        api_key =
        monitor = Website
        [[[cod_uptime_search]]]
        instance = kpiit.metrics.uptime
        name = search
        url = https://api.uptimerobot.com/v2/
        api_key =
        monitor = Search
        [[[cod_uptime_files]]]
        instance = kpiit.metrics.uptime
        name = files
        url = https://api.uptimerobot.com/v2/
        api_key =
        monitor = Files upload/download

        # Visits metrics
        [[[zenodo_visits]]]
        instance = kpiit.metrics.visits
        name = zenodo_support
        site_id = 57

        [[[cds_videos_visits]]]
        instance = kpiit.metrics.visits
        name = cds_videos_support
        site_id =

        [[[cod_visits]]]
        instance = kpiit.metrics.visits
        name = cod_support
        site_id =

        # Support metrics
        [[[zenodo_support]]]
        instance = kpiit.metrics.support
        name = zenodo_support
        service = $zenodo_service

        [[[cds_videos_support]]]
        instance = kpiit.metrics.support
        name = cds_videos_support
        service = $cds_videos_service

        [[[cod_support]]]
        instance = kpiit.metrics.support
        name = cod_support
        service = $cod_service


    # Configure Celery publishers
    [[publishers]]
        # DOI publishers
        [[[zenodo_doi]]]
        instance = kpiit.publishers.doi
        prefix = $zenodo_doi_prefix

        [[[cds_videos_doi]]]
        instance = kpiit.publishers.doi
        prefix = $cds_videos_doi_prefix

        [[[cod_doi]]]
        instance = kpiit.publishers.doi
        prefix = $cod_doi_prefix

        # Repo publishers
        [[[zenodo_repo]]]
        instance = kpiit.publishers.repo
        service = $zenodo_service
        env = $publish_repo_env

        [[[cds_videos_repo]]]
        instance = kpiit.publishers.repo
        service = $cds_videos_service
        env = $publish_repo_env

        [[[cod_repo]]]
        instance = kpiit.publishers.repo
        service = $cod_service
        env = $publish_repo_env

[providers]
    # DataCite provider settings
    [[data_cite]]
    index_url = https://stats.datacite.org/stats/resolution-report/index.html
    stats_url = https://stats.datacite.org/stats/resolution-report/

    # Piwik provider settings
    [[piwik]]
    principal =
    keytab_file =
    base_url = https://piwikui.web.cern.ch/piwikui
    url = $base_url/index.php?module=API&{query}

    # Service Now provider settings
    [[snow]]
    url = https://cerntraining.service-now.com
    incident_table = incident
    request_table = u_request_fulfillment

    # all states that are counted as a "closed" ticket (see Task States below)
    closed_task_states = closed_complete, closed_incomplete, resolved, closed_skipped, closed_abandoned

        # Functional Elements
        [[[fe]]]
        cds = CERN Document Server
        cds_videos = MultiMedia Archive
        cod = Open Data Repository
        zenodo = Zenodo Repository

        # Task States (from https://cerntraining.service-now.com)
        [[[states]]]
        pending = -5
        open = 1
        wip = 2
        closed_complete = 3
        closed_incomplete = 4
        approved = 5
        resolved = 6
        closed_skipped = 7
        closed_abandoned = 8
        ready = 10
        on_hold = 11
        approved2 = 13  # Approved repeated
        awaiting_qualitification = 15
        assigned = 16
        accepted = 17
        wip2 = 18  # WIP repeated
        waiting_3rd_party = 21
        planned = 30
        control = 100
        action = 105
        decision = 110
        compliant = 650
        partially_compliant = 655
        non_compliant = 660

# Configure the deployment script
[deploy]
default_image = kpiit-image:latest
default_registry = openshift-registry.web.cern.ch/it-cda-dr-kpis
default_deployment = deployment.apps/worker

docker_login_cmd = docker login -u openshift -p $(oc whoami -t) {registry}
docker_build_cmd = docker build --no-cache=true --network=host -t {image} .
docker_tag_cmd = docker tag {image} {registry}/{image_name}
docker_push_cmd = docker push {registry}/{image}

redeploy_cmd = oc get --export {} -o json
update_deploy_cmd = oc patch {deployment} -p '{json_data}'
